{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\OneDrive - Groupe ESAIP\\\\Bureau\\\\React\\\\01-starting-project_FirstPracticeProject\\\\01-starting-project\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport logo from './assets/investment-calculator-logo.png';\nimport UserInputs from \"./components/userImport/UserInputs\";\nimport UserOutput from \"./components/useroutputs/UserOutput\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const tabData = [{\n    current: 15,\n    yearly: 16,\n    expected: 17,\n    investment: 18\n  }];\n  function saveTabData(entry) {\n    tabData.push(entry);\n    console.log(tabData);\n  }\n  const [test, setTest] = useState(0);\n  const calculateHandler = userInput => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Investment Calculator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(UserInputs, {\n      onSaveData: saveTabData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(UserOutput, {\n      data: tabData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"fAeQ64B5hJe636p2A7GzLjDGG1U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","UserInputs","UserOutput","useState","jsxDEV","_jsxDEV","App","_s","tabData","current","yearly","expected","investment","saveTabData","entry","push","console","log","test","setTest","calculateHandler","userInput","yearlyData","currentSavings","yearlyContribution","expectedReturn","duration","i","yearlyInterest","year","savingsEndOfYear","children","className","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onSaveData","data","_c","$RefreshReg$"],"sources":["C:/Users/Utilisateur/OneDrive - Groupe ESAIP/Bureau/React/01-starting-project_FirstPracticeProject/01-starting-project/src/App.js"],"sourcesContent":["import logo from './assets/investment-calculator-logo.png';\nimport UserInputs from \"./components/userImport/UserInputs\";\n\nimport UserOutput from \"./components/useroutputs/UserOutput\";\nimport {useState} from \"react\";\n\nfunction App() {\n\n    const tabData = [\n        {\n            current: 15,\n            yearly: 16,\n            expected: 17,\n            investment: 18,\n        }\n    ];\n\n    function saveTabData(entry) {\n        tabData.push(entry);\n        console.log(tabData);\n    }\n\n    const [test, setTest] = useState(0);\n    const calculateHandler = (userInput) => {\n\n        // Should be triggered when form is submitted\n        // You might not directly want to bind it to the submit event on the form though...\n\n        const yearlyData = []; // per-year results\n\n        let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n        const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n        const expectedReturn = +userInput['expected-return'] / 100;\n        const duration = +userInput['duration'];\n\n        // The below code calculates yearly results (total savings, interest etc)\n        for (let i = 0; i < duration; i++) {\n            const yearlyInterest = currentSavings * expectedReturn;\n            currentSavings += yearlyInterest + yearlyContribution;\n            yearlyData.push({\n                // feel free to change the shape of the data pushed to the array!\n                year: i + 1,\n                yearlyInterest: yearlyInterest,\n                savingsEndOfYear: currentSavings,\n                yearlyContribution: yearlyContribution,\n            });\n        }\n    };\n\n    return (\n        <div>\n            <header className=\"header\">\n                <img src={logo} alt=\"logo\"/>\n                <h1>Investment Calculator</h1>\n            </header>\n            <UserInputs onSaveData={saveTabData}></UserInputs>\n\n            {/* Todo: Show below table conditionally (only once result data is available) */}\n            {/* Show fallback text if no data is available */}\n            <UserOutput data={tabData}></UserOutput>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,IAAI,MAAM,yCAAyC;AAC1D,OAAOC,UAAU,MAAM,oCAAoC;AAE3D,OAAOC,UAAU,MAAM,qCAAqC;AAC5D,SAAQC,QAAQ,QAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEX,MAAMC,OAAO,GAAG,CACZ;IACIC,OAAO,EAAE,EAAE;IACXC,MAAM,EAAE,EAAE;IACVC,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE;EAChB,CAAC,CACJ;EAED,SAASC,WAAWA,CAACC,KAAK,EAAE;IACxBN,OAAO,CAACO,IAAI,CAACD,KAAK,CAAC;IACnBE,OAAO,CAACC,GAAG,CAACT,OAAO,CAAC;EACxB;EAEA,MAAM,CAACU,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC;EACnC,MAAMiB,gBAAgB,GAAIC,SAAS,IAAK;IAEpC;IACA;;IAEA,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;;IAEvB,IAAIC,cAAc,GAAG,CAACF,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACpD,MAAMG,kBAAkB,GAAG,CAACH,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAC9D,MAAMI,cAAc,GAAG,CAACJ,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;IAC1D,MAAMK,QAAQ,GAAG,CAACL,SAAS,CAAC,UAAU,CAAC;;IAEvC;IACA,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;MAC/B,MAAMC,cAAc,GAAGL,cAAc,GAAGE,cAAc;MACtDF,cAAc,IAAIK,cAAc,GAAGJ,kBAAkB;MACrDF,UAAU,CAACP,IAAI,CAAC;QACZ;QACAc,IAAI,EAAEF,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BE,gBAAgB,EAAEP,cAAc;QAChCC,kBAAkB,EAAEA;MACxB,CAAC,CAAC;IACN;EACJ,CAAC;EAED,oBACInB,OAAA;IAAA0B,QAAA,gBACI1B,OAAA;MAAQ2B,SAAS,EAAC,QAAQ;MAAAD,QAAA,gBACtB1B,OAAA;QAAK4B,GAAG,EAAEjC,IAAK;QAACkC,GAAG,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,eAC5BjC,OAAA;QAAA0B,QAAA,EAAI;MAAqB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B,CAAC,eACTjC,OAAA,CAACJ,UAAU;MAACsC,UAAU,EAAE1B;IAAY;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAa,CAAC,eAIlDjC,OAAA,CAACH,UAAU;MAACsC,IAAI,EAAEhC;IAAQ;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAa,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvC,CAAC;AAEd;AAAC/B,EAAA,CAxDQD,GAAG;AAAAmC,EAAA,GAAHnC,GAAG;AA0DZ,eAAeA,GAAG;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}